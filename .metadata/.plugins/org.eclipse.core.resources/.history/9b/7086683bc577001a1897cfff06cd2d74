package com.springrest.springdemo.rest;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springrest.springdemo.entity.Student;

@RestController
@RequestMapping("/api")
public class StudentRestController {

	private List<Student> theStudent;

	// define post constrctor to load the student data .. only once!
	@PostConstruct
	public void loadData() {
		theStudent = new ArrayList<Student>();
		theStudent.add(new Student("krishna", "kanth"));
		theStudent.add(new Student("ravi", "babu"));
		theStudent.add(new Student("hari", "priyanka"));

	}

	// define endpoint for "/student"-return list of students
	@RequestMapping("/students")
	public List<Student> getStudents() {

		return theStudent;

	}

	// define endpoint for "/students/{studentid}"-return student at index
	@GetMapping("/students/{studentId}")
	public Student getStudent(@PathVariable int studentId) {

		// check the studentid aganist list size
		if ((studentId >= theStudent.size()) || (studentId < 0)) {
			throw new StudentNotFoundException("student id not found=" + studentId);

		}
		return theStudent.get(studentId);

	}

	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handlException(StudentNotFoundException exec) {
		//create a studentErrorResponse
		StudentErrorResponse error= new StudentErrorResponse();
		error.setStatus(HttpStatus.NOT_FOUND.value());
		error.setMessage(exec.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		//return ResponseEntity
		
		return new ResponseEntity<StudentErrorResponse>(error, HttpStatus.NOT_FOUND);
	}
	@ExceptionHandler
	public ResponseEntity<StudentErrorResponse> handlException(Exception exec){
		
		StudentErrorResponse error= new StudentErrorResponse();
		error.setStatus(HttpStatus.BAD_REQUEST.value());
		error.setMessage(exec.getMessage());
		error.setTimeStamp(System.currentTimeMillis());
		
		return new ResponseEntity<StudentErrorResponse>(error, HttpStatus.BAD_REQUEST);
		
	}
}
